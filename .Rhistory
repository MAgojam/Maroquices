str(wLev[names(wLev)==vd_g1_nome])
wLev<- apply(vds,2,function(x) {car::leveneTest(na.omit(x) ~ vi[!is.na(x)], center="mean")[1:2,1:2]})|>as.data.frame()
wLev
wLev[names(wLev)==vd_g1_nome]|>as.data.frame()
wLev
wLev<- apply(vds,2,function(x) {car::leveneTest(na.omit(x) ~ vi[!is.na(x)], center="mean")[1:2,1:2]})
wLev[names(wLev)==vd_g1_nome]|>as.data.frame()
wLev
wLev <- as.data.frame(wLev[names(wLev)==vd_g1_nome])
wLev
wLevf <- as.data.frame(wLev[names(wLev)==vd_g1_nome])
wLevf
wLev<- apply(vds,2,function(x) {car::leveneTest(na.omit(x) ~ vi[!is.na(x)], center="mean")[1:2,1:2]})
wLevf <- as.data.frame(wLev[names(wLev)==vd_g1_nome])
wLevf
wLevf$TesteFinal.Df[1]
wHom <- paste0("W(",wLevf$TesteFinal.Df[1], ", ",
wLevf$TesteFinal.Df[2],
") = ",
wLevf$TesteFinal.F.value[1]|>round(3))
wHom
wHom <- paste0("W(",wLevf$TesteFinal.Df[1], ", ",
wLevf$TesteFinal.Df[2],
") = ",
round(wLevf$TesteFinal.F.value[1],3))
wHom
pHom
pHom
pHom[1]
pHom[[1]]
wHom <- paste0("W(",wLevf$TesteFinal.Df[1], ", ",
wLevf$TesteFinal.Df[2],
") = ",
wLevf$TesteFinal.F.value[1])
wHom
wHom <- paste0("W(",wLevf$TesteFinal.Df[1], ", ",
wLevf$TesteFinal.Df[2],
") = ",
wLevf$TesteFinal.F.value)
wHom
wHom <- paste0("W(",wLevf$TesteFinal.Df[1], ", ",
wLevf$TesteFinal.Df[2],
") = ",
wLevf$TesteFinal.F.value[1])
x <- c(-4:10)
ft <- dt(x, 30, ncp=4, log = FALSE)
plot(ft)
plot(ft~x)
x <- c(-2:12)
ft <- dt(x, 30, ncp=4, log = FALSE)
plot(ft~x)
ft <- dt(x, 30, ncp=0, log = FALSE)
plot(ft~x)
x <- c(-4:12)
ft <- dt(x, 30, ncp=0, log = FALSE)
ftncp <- dt(x, 30, ncp=4, log = FALSE)
plot(ftncp~x)
plot(ft~x)
curve(ftncp~x)
plot(ftncp~x)
curve(ft~x, add=T)
plot(ftncp~x, type='l')
plot(ftncp~x, type='c')
plot(ftncp~x, type='p')
curve(x, ft, add=T)
curve(ft~x, add=T)
line(x,ft)
plot(ftncp~x, type='p')
lines(x,ft)
curves(x,ft)
curve(x,ft)
plot(ftncp~x)
lines(x,ft)
points(x,ft)
plot(ftncp~x)
points(x,ft)
plot(ftncp~x)
points(x,ft,pch="*")
plot(ftncp~x)
points(x,ft,pch="o")
plot(ftncp~x)
points(x,ft)
points(x,ft, col="blue")
ftncp <- dt(x, 30, ncp=10, log = FALSE)
plot(ftncp~x)
points(x,ft, col="blue")
ftncp <- dt(x, 30, ncp=5, log = FALSE)
plot(ftncp~x)
points(x,ft, col="blue")
ftncp <- dt(x, 30, ncp=2, log = FALSE)
plot(ftncp~x)
points(x,ft, col="blue")
ftncp <- dt(x, 30, ncp=6, log = FALSE)
plot(ftncp~x)
points(x,ft, col="blue")
plot(ftncp~x)
points(x,ft, col="blue", pch=16)
x <- seq(-4, 12, 0.25)
ft <- dt(x, 30, ncp=0, log = FALSE)
ftncp <- dt(x, 30, ncp=6, log = FALSE)
plot(ftncp~x)
points(x,ft, col="blue", pch=16)
x <- seq(-4, 12, 0.1)
ft <- dt(x, 30, ncp=0, log = FALSE)
ftncp <- dt(x, 30, ncp=6, log = FALSE)
plot(ftncp~x)
points(x,ft, col="blue", pch=16)
plot(x,ft, col="blue", pch=16)
points(x,ftncp, col="white", pch=16)
points(x,ftncp, col="white", pch=1)
plot(x,ft, col="blue", pch=16)
points(x,ftncp, pch=1)
ftncp <- dt(x, 30, ncp=5, log = FALSE)
plot(x,ft, col="blue", pch=16)
points(x,ftncp, pch=1)
df <- 20
ft <- dt(x, df, ncp=0, log = FALSE)
ftncp <- dt(x, df, ncp=5, log = FALSE)
plot(x,ft, col="blue", pch=16)
points(x,ftncp, pch=1)
x <- seq(-4, 12, 0.1)
df <- 10
ft <- dt(x, df, ncp=0, log = FALSE)
ftncp <- dt(x, df, ncp=5, log = FALSE)
plot(x,ft, col="blue", pch=16)
points(x,ftncp, pch=1)
df <- 5
ft <- dt(x, df, ncp=0, log = FALSE)
ftncp <- dt(x, df, ncp=5, log = FALSE)
plot(x,ft, col="blue", pch=16)
points(x,ftncp, pch=1)
df <- 10
ft <- dt(x, df, ncp=0, log = FALSE)
ftncp <- dt(x, df, ncp=5, log = FALSE)
df <- 9
ft <- dt(x, df, ncp=0, log = FALSE)
ftncp <- dt(x, df, ncp=5, log = FALSE)
plot(x,ft, col="blue", pch=16)
points(x,ftncp, pch=1)
data <- c(7.2,12.5,14,13.1,11.6,13.1,9.8,11.5,10.5,12.5)
m <- mean(data)
data <- c(7.2,12.5,14,13.1,11.6,13.1,9.8,11.5,10.5,12.5)
m <- mean(data)
s <- sd(data)
n <- count(data)
n <- length(data)
delta <- (m-m0)*sqrt(n)/s
m0 <- 10
delta <- (m-m0)*sqrt(n)/s
x <- seq(-4, 12, 0.1)
df <- 9
ft <- dt(x, df, ncp=delta, log = FALSE)
ftncp <- dt(x, df, ncp=5, log = FALSE)
plot(x,ft, col="blue", pch=16)
points(x,ftncp, pch=1)
delta
dataf <- c(x,ftncp)
dataf
datapl <- c(x,ftncp)|>round(3)
datapl
datapl <- paste0(x,",",ftncp)|>round(3)
datapl <- paste0(x,",",ftncp)
datapl
m0 <- 10
data <- c(7.2,12.5,14,13.1,11.6,13.1,9.8,11.5,10.5,12.5)
m <- mean(data)
s <- sd(data)
n <- length(data)
delta <- (m-m0)*sqrt(n)/s
x <- seq(-4, 12, 0.1)
df <- 9
ft <- dt(x, df, ncp=delta, log = FALSE)
ftncp <- dt(x, df, ncp=5, log = FALSE)
plot(x,ft, col="blue", pch=16)
points(x,ftncp, pch=1)
x <- seq(-4, 12, 0.1)
x <- seq(-4, 12, 0.25)
df <- 9
ft <- dt(x, df, ncp=0, log = FALSE)
ftncp <- dt(x, df, ncp=delta, log = FALSE)
plot(x,ft, col="blue", pch=16)
points(x,ftncp, pch=1)
datapl <- paste0(x,",",ftncp)
x <- seq(-4, 8, 0.25)
ftncp <- dt(x, df, ncp=delta, log = FALSE)
datapl <- paste0(x,",",ftncp)
qt(0.95,9)
qt(0.95,9,delta)
qt(0.95,9,ncp=delta)
qt(0.95,9,ncp=2.5)
pt(1.933,9,ncp=delta)
pt(1.833,9,ncp=delta)
dt(1.833,9,ncp=delta)
1-0.251
x <- rnorm(10, m=39, sd=6)
x
x <- rnorm(10, m=39, sd=6)|> round(1)
x
x <- rnorm(10, m=32, sd=10)|> round(1)
x
x <- rnorm(10, m=52, sd=5)|> round(1)
x
x <- rnorm(10, m=67, sd=10)|> round(1)
x
x <- rnorm(10, m=76, sd=10)|> round(0)
x
x <- rnorm(20, m=76, sd=10)|> round(0)
x
knitr::opts_chunk$set(echo = TRUE)
library(haven)
db <- read_sav("D:/OneDrive - ISPA/ongoing/Natalia/DyslexiSPSS.sav")
db <- db[-c(1:21),]
pacman::p_load(haven, summarytools, skimr,knitr, gtsummary, lavaan, semTools, lavaanPlot, kableExtra, dplyr, tidyr)
db$IdentifyDLD
cite(lavaan())
cite(lavaan)
cite("lavaan")
citation("skimr")
#SkimStatistics
temp <- tempfile()
cat("font = NSimSun\n", file = temp, append = TRUE)
Sys.setlocale( locale='Chinese' )
myskim <- skim_with(numeric = sfl(n=length,sk = ~ psych::skew(., na.rm = TRUE), ku= ~ psych:: kurtosi(.,na.rm=TRUE)), append = T)
db[,c(143:152,163:171)] %>%
myskim() %>%
kable(caption = "Item Descriptives", round=2) %>% kable_classic_2()
modM <- "
# Measuring Model
DLDComp=~MappingDLD + IdentifyDLD + FollowUpDLD
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#RWDComp=~MappingRWD + IdentifyRWD + FollowUpRWD
"
fit <- sem(model=modM, data=db,ordered=T)
stdresults <- standardizedSolution(fit, ci=F)
kbl(stdresults[stdresults$op=="=~",], digits = 3, caption = "Standardized Factor Loadings") %>% kable_classic_2()
fitmeas <- fitMeasures(fit,c("chisq.scaled", "df.scaled", "pvalue.scaled","cfi","tli", "nfi","rmsea", "srmr"),output = "matrix")
kbl(fitmeas, digits = 3, caption="Goodness of fit indices") %>% kable_classic_2()
rel <- reliability(fit)
kbl(rel, digits = 3, caption="Reliability of first order factors") %>% kable_classic_2()
lavaanPlot(model = fit, coefs = TRUE, stand = TRUE, covs=TRUE,graph_options = list(layout="dot",rankdir = "RL"))
db$SpecialNeedsEducation[db$SpecialNeedsEducation == 1] <- 0
db$SpecialNeedsEducation[db$SpecialNeedsEducation == 2] <- 1
#install.packages("labelled")
library("labelled")
val_labels(db$SpecialNeedsEducation) <- c(noSEN = 0, yesSEN = 1)
modS <- "
# Measuring Model
DLDComp=~MappingDLD + IdentifyDLD + FollowUpDLD
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#RWDComp=~MappingRWD + IdentifyRWD + FollowUpRWD
# SEM Model
DLDComp ~ ComputerTechnology_Competence + SpecialNeedsEducation + Years_Of_Teaching_At_Schools+ MathComp
"
fit <- sem(model=modS, data=db)
stdresults <- standardizedSolution(fit, ci=F)
kbl(stdresults[stdresults$op=="=~" | stdresults$op=="~",], digits = 3, caption = "Standardized Factor Loadings") %>% kable_classic_2()
fitmeas <- fitMeasures(fit,c("chisq.scaled", "df.scaled", "pvalue.scaled","cfi","tli", "nfi","rmsea", "srmr"),output = "matrix")
kbl(fitmeas, digits = 3, caption="Goodness of fit indices") %>% kable_classic_2()
lavaanPlot(model = fit, coefs = TRUE, stand = TRUE, covs=TRUE,graph_options = list(layout="dot",rankdir = "RL"))
summary(fit,standardize=T,rsquare=T)
fit <- sem(model=modS, data=db)
db$SpecialNeedsEducation[db$SpecialNeedsEducation == 1] <- 0
db$SpecialNeedsEducation[db$SpecialNeedsEducation == 2] <- 1
#install.packages("labelled")
library("labelled")
val_labels(db$SpecialNeedsEducation) <- c(noSEN = 0, yesSEN = 1)
modS <- "
# Measuring Model
DLDComp=~MappingDLD + IdentifyDLD + FollowUpDLD
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#RWDComp=~MappingRWD + IdentifyRWD + FollowUpRWD
# SEM Model
DLDComp ~ ComputerTechnology_Competence + SpecialNeedsEducation + Years_Of_Teaching_At_Schools
"
fit <- sem(model=modS, data=db)
stdresults <- standardizedSolution(fit, ci=F)
kbl(stdresults[stdresults$op=="=~" | stdresults$op=="~",], digits = 3, caption = "Standardized Factor Loadings") %>% kable_classic_2()
fitmeas <- fitMeasures(fit,c("chisq.scaled", "df.scaled", "pvalue.scaled","cfi","tli", "nfi","rmsea", "srmr"),output = "matrix")
kbl(fitmeas, digits = 3, caption="Goodness of fit indices") %>% kable_classic_2()
lavaanPlot(model = fit, coefs = TRUE, stand = TRUE, covs=TRUE,graph_options = list(layout="dot",rankdir = "RL"))
summary(fit,standardize=T,rsquare=T)
fit <- sem(model=modS, data=db)
fit <- sem(model=modS, data=db, estimator="MLR")
knitr::opts_chunk$set(echo = TRUE)
library(haven)
db <- read_sav("D:/OneDrive - ISPA/ongoing/Natalia/DyslexiSPSS.sav")
db <- db[-c(1:21),]
pacman::p_load(haven, summarytools, skimr,knitr, gtsummary, lavaan, semTools, lavaanPlot, kableExtra, dplyr, tidyr)
db$SpecialNeedsEducation[db$SpecialNeedsEducation == 1] <- 0
db$SpecialNeedsEducation[db$SpecialNeedsEducation == 2] <- 1
#install.packages("labelled")
library("labelled")
val_labels(db$SpecialNeedsEducation) <- c(noSEN = 0, yesSEN = 1)
modS <- "
# Measuring Model
# Measuring Model
DLDComp=~MappingDLD + IdentifyDLD + FollowUpDLD
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#RWDComp=~MappingRWD + IdentifyRWD + FollowUpRWD
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#RWDComp=~MappingRWD + IdentifyRWD + FollowUpRWD
# SEM Model
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#RWDComp=~MappingRWD + IdentifyRWD + FollowUpRWD
# SEM Model
DLDComp ~ ComputerTechnology_Competence + SpecialNeedsEducation + Years_Of_Teaching_At_Schools
"
fit <- sem(model=modS, data=db, estimator="MLR")
stdresults <- standardizedSolution(fit, ci=F)
kbl(stdresults[stdresults$op=="=~" | stdresults$op=="~",], digits = 3, caption = "Standardized Factor Loadings") %>% kable_classic_2()
db2 <- db[!is.na(db$SchoolLevel),]
db2$SchoolLevel <- as.factor(db2$SchoolLevel)
fit <- sem(model=modS, data=db2, group="SchoolLevel",estimator="MLR")
summary(fit, standardized=T,rsquare=T)
stdresults <- standardizedSolution(fit, ci=F)
kbl(stdresults[stdresults$op=="=~" | stdresults$op=="~",], digits = 3, caption = "Standardized Factor Loadings") %>% kable_classic_2()
kbl(stdresults[stdresults$op=="=~" | stdresults$op=="~" | stdresults$op=="~~",], digits = 3, caption = "Standardized Factor Loadings") %>% kable_classic_2()
fitmeas <- fitMeasures(fit,c("chisq.scaled", "df.scaled", "pvalue.scaled","cfi","tli", "nfi","rmsea", "srmr"),output = "matrix")
kbl(fitmeas, digits = 3, caption="Goodness of fit indices") %>% kable_classic_2()
fit <- sem(model=modS, data=db2, group="SchoolLevel",estimator="MLR")
summary(fit, standardized=T,rsquare=T)
fitConfigural <- cfa(model=modS, data=db2, group="SchoolLevel",estimator="MLR")
fitMetric <- cfa(model=modS, data=db2, group="SchoolLevel", group.equal = "loadings", estimator="MLR")
fitScalar <- cfa(model=modS, data=db2, group="SchoolLevel", group.equal = c("intercepts", "loadings"),estimator="MLR")
fitStructural <- cfa(model=modS, data=db2, group="SchoolLevel", group.equal = c("intercepts","loadings", "means"), estimator="MLR")
Tab <- lavTestLRT(fitConfigural, fitMetric,fitScalar, fitStructural)#, fitScalar, fitStructural) #, fit4, fit5, fit6)
fc <- fitmeasures(fitConfigural, c("CFI", "RMSEA"))
fm <- fitmeasures(fitMetric, c("CFI", "RMSEA"))
fs <- fitmeasures(fitScalar, c("CFI", "RMSEA"))
fstr <- fitmeasures(fitStructural, c("CFI", "RMSEA"))
invdf <- data.frame(Tab, CFI=c(fc[1],fm[1], fs[1], fstr[1]), RMSEA=c(fc[2],fm[2],fs[2], fstr[2]))
colnames(invdf)[7] <- "P[Chisq.diff >]"
invdf$"$\\Delta CFI$" <- ave(invdf$CFI, FUN=function(x) c(0, diff(x)))
invdf$"$\\Delta RMSEA$" <- ave(invdf$RMSEA, FUN=function(x) c(0, diff(x)))
knitr::kable(invdf, caption = "Analysis of Invariance for School Levels", digits = 3) %>% kable_classic()
fit <- sem(model=modS, data=db, estimator="MLR")
stdresults <- standardizedSolution(fit, ci=F)
kbl(stdresults[stdresults$op=="=~" | stdresults$op=="~",], digits = 3, caption = "Standardized Factor Loadings") %>% kable_classic_2()
fitmeas <- fitMeasures(fit,c("chisq.scaled", "df.scaled", "pvalue.scaled","cfi","tli", "nfi","rmsea", "srmr"),output = "matrix")
kbl(fitmeas, digits = 3, caption="Goodness of fit indices") %>% kable_classic_2()
lavaanPlot(model = fit, coefs = TRUE, stand = TRUE, covs=TRUE,graph_options = list(layout="dot",rankdir = "RL"))
summary(fit,standardize=T,rsquare=T)
modS <- "
# Measuring Model
DLDComp=~MappingDLD + IdentifyDLD + FollowUpDLD
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#RWDComp=~MappingRWD + IdentifyRWD + FollowUpRWD
# SEM Model
DLDComp ~ ComputerTechnology_Competence + SpecialNeedsEducation + Years_Of_Teaching_At_Schools + Gender
"
fit <- sem(model=modS, data=db, estimator="MLR")
stdresults <- standardizedSolution(fit, ci=F)
kbl(stdresults[stdresults$op=="=~" | stdresults$op=="~",], digits = 3, caption = "Standardized Factor Loadings") %>% kable_classic_2()
fitmeas <- fitMeasures(fit,c("chisq.scaled", "df.scaled", "pvalue.scaled","cfi","tli", "nfi","rmsea", "srmr"),output = "matrix")
kbl(fitmeas, digits = 3, caption="Goodness of fit indices") %>% kable_classic_2()
summary(fit,standardize=T,rsquare=T)
db$Gender
summary(fit,standardize=T,rsquare=T)
db$Gender
db$Gender[db$Gender== 1] <- 1
db$Gender[db$Gender == 2] <- 0
val_labels(db$Gender) <- c(Male = 0, Female = 1)
modS <- "
# Measuring Model
# Measuring Model
DLDComp=~MappingDLD + IdentifyDLD + FollowUpDLD
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#RWDComp=~MappingRWD + IdentifyRWD + FollowUpRWD
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#RWDComp=~MappingRWD + IdentifyRWD + FollowUpRWD
# SEM Model
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#RWDComp=~MappingRWD + IdentifyRWD + FollowUpRWD
# SEM Model
DLDComp ~ ComputerTechnology_Competence + SpecialNeedsEducation + Years_Of_Teaching_At_Schools +
"
fit <- sem(model=modS, data=db, estimator="MLR")
modS <- "
# Measuring Model
DLDComp=~MappingDLD + IdentifyDLD + FollowUpDLD
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#RWDComp=~MappingRWD + IdentifyRWD + FollowUpRWD
# SEM Model
DLDComp ~ ComputerTechnology_Competence + SpecialNeedsEducation + Years_Of_Teaching_At_Schools +
"
fit <- sem(model=modS, data=db, estimator="MLR")
modS <- "
# Measuring Model
DLDComp=~MappingDLD + IdentifyDLD + FollowUpDLD
#MathComp=~MappingMathematic + IdentifyMathematic + FollowUpMathematic
#RWDComp=~MappingRWD + IdentifyRWD + FollowUpRWD
# SEM Model
DLDComp ~ ComputerTechnology_Competence + SpecialNeedsEducation + Years_Of_Teaching_At_Schools + Gender
"
fit <- sem(model=modS, data=db, estimator="MLR")
stdresults <- standardizedSolution(fit, ci=F)
kbl(stdresults[stdresults$op=="=~" | stdresults$op=="~",], digits = 3, caption = "Standardized Factor Loadings") %>% kable_classic_2()
lavaanPlot(model = fit, coefs = TRUE, stand = TRUE, covs=TRUE,graph_options = list(layout="dot",rankdir = "RL"))
summary(fit,standardize=T,rsquare=T)
db2 <- db[!is.na(db$SchoolLevel),]
db2$SchoolLevel <- as.factor(db2$SchoolLevel)
fit <- sem(model=modS, data=db2, group="SchoolLevel",estimator="MLR")
summary(fit, standardized=T,rsquare=T)
fitConfigural <- cfa(model=modS, data=db2, group="SchoolLevel",estimator="MLR")
#summary(fitConfigural, standardized=T, fit.measures=T, rsq=T)
fitMetric <- cfa(model=modS, data=db2, group="SchoolLevel", group.equal = "loadings", estimator="MLR")
fitScalar <- cfa(model=modS, data=db2, group="SchoolLevel", group.equal = c("intercepts", "loadings"),estimator="MLR")
fitStructural <- cfa(model=modS, data=db2, group="SchoolLevel", group.equal = c("intercepts","loadings", "means"), estimator="MLR")
Tab <- lavTestLRT(fitConfigural, fitMetric,fitScalar, fitStructural)#, fitScalar, fitStructural) #, fit4, fit5, fit6)
fc <- fitmeasures(fitConfigural, c("CFI", "RMSEA"))
fm <- fitmeasures(fitMetric, c("CFI", "RMSEA"))
fs <- fitmeasures(fitScalar, c("CFI", "RMSEA"))
fstr <- fitmeasures(fitStructural, c("CFI", "RMSEA"))
invdf <- data.frame(Tab, CFI=c(fc[1],fm[1], fs[1], fstr[1]), RMSEA=c(fc[2],fm[2],fs[2], fstr[2]))
colnames(invdf)[7] <- "P[Chisq.diff >]"
invdf$"$\\Delta CFI$" <- ave(invdf$CFI, FUN=function(x) c(0, diff(x)))
invdf$"$\\Delta RMSEA$" <- ave(invdf$RMSEA, FUN=function(x) c(0, diff(x)))
knitr::kable(invdf, caption = "Analysis of Invariance for School Levels", digits = 3) %>% kable_classic()
bd <-matrix(c( 3,1.4,1.4,
4.1,1.4,1.3,
1,1.7,0.5,
4,1.2,1.2,
4,1.6,0.9),
byrow = TRUE,nrow=5, ncol=3,dimnames=list(1:5,LETTERS[1:3]))
bd <- as.data.frame(bd)
bd <-matrix(c( 3,1.4,1.4,
4.1,1.4,1.3,
1,1.7,0.5,
4,1.2,1.2,
4,1.6,0.9),
byrow = TRUE,nrow=5, ncol=3,dimnames=list(1:5,LETTERS[1:3]))
byrow = TRUE,nrow=5, ncol=3,dimnames=list(1:5,c("EuroE1","EuroE2","EuroE3"))
bd <-matrix(c( 3,1.4,1.4,
byrow = TRUE,nrow=5, ncol=3,dimnames=list(1:5,c("EuroE1","EuroE2","EuroE3"))
bd <-matrix(c( 3,1.4,1.4,
bd <-matrix(c( 3,1.4,1.4,
4.1,1.4,1.3,
1,1.7,0.5,
4,1.2,1.2,
4,1.6,0.9),
byrow = TRUE,nrow=5, ncol=3,
dimnames=list(1:5,c("EuroE1","EuroE2","EuroE3")))
bd
bd <- as.data.frame(bd)
bd
cols <- colnames(bd)
n <- nrow(bd)
n
k <-  ncol(bd)
k
rank<-t(apply(bd, 1, rank))
rank
rankSum<-colSums(rank)
rankSum/n
SE <- sqrt(k*(k+1)/(6*n))
rankSum/n/SE
0.8/SE
for (i in 1:(k-1)){
for (j in (i+1):k){
comps[length(comps)+1] <- paste(cols[i],"-",cols[j])
stat[length(stat)+1] <- ((rankSum[j]-rankSum[i])/n)|> round(3)
zstat[length(zstat)+1] <- (stat[length(stat)]/SE)|> round(3)
sig[length(sig)+1] <- (2*(1-pnorm(abs(zstat[length(zstat)]))))|> round(3)
}
}
omps <- vector()
stat <- vector("numeric")
zstat <- vector("numeric")
sig <- vector("numeric")
adjsig <- vector("numeric")
for (i in 1:(k-1)){
for (j in (i+1):k){
comps[length(comps)+1] <- paste(cols[i],"-",cols[j])
stat[length(stat)+1] <- ((rankSum[j]-rankSum[i])/n)|> round(3)
zstat[length(zstat)+1] <- (stat[length(stat)]/SE)|> round(3)
sig[length(sig)+1] <- (2*(1-pnorm(abs(zstat[length(zstat)]))))|> round(3)
}
}
comps <- vector()
stat <- vector("numeric")
zstat <- vector("numeric")
sig <- vector("numeric")
adjsig <- vector("numeric")
rank<-t(apply(bd, 1, rank))
rankSum<-colSums(rank)
SE <- sqrt(k*(k+1)/(6*n))
for (i in 1:(k-1)){
for (j in (i+1):k){
comps[length(comps)+1] <- paste(cols[i],"-",cols[j])
stat[length(stat)+1] <- ((rankSum[j]-rankSum[i])/n)|> round(3)
zstat[length(zstat)+1] <- (stat[length(stat)]/SE)|> round(3)
sig[length(sig)+1] <- (2*(1-pnorm(abs(zstat[length(zstat)]))))|> round(3)
}
}
stat
zstat
adjsig <-  (p.adjust(sig, method = method, n = length(sig)))|>round(3)
method <- "bonferroni"
adjsig <-  (p.adjust(sig, method = method, n = length(sig)))|>round(3)
resultsd <- data.frame (comps,stat,zstat,sig,adjsig)
resultsd
results$stat[1]
resultsd$stat[1]
nComps
# for Maroquices
options(jamovi_home="C:\\Program Files\\jamovi 2.3.21.0")
library(jmvtools)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd('Maroquices')
jmvtools::install()
